<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hello, I'm Mark</title><link>https://markc.su/</link><description>Recent content on Hello, I'm Mark</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 08 Aug 2023 07:07:57 +0200</lastBuildDate><atom:link href="https://markc.su/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang Interfaces: How different they are to Java</title><link>https://markc.su/posts/golang-interfaces/</link><pubDate>Tue, 08 Aug 2023 07:07:57 +0200</pubDate><guid>https://markc.su/posts/golang-interfaces/</guid><description>Originally I planned to make a new blogpost about the visitor design pattern and wanted to use Golang to show the concept for it. But because of how Golang is organized fundamentally you&amp;rsquo;ll see that the visitor pattern doesn&amp;rsquo;t make sense with Go.
Playing around with interfaces and trying to jumble together some thoughts via chatting I was able to better understand the big differences between Java and Go interfaces.</description></item><item><title>Setting up project specific tools using Nix</title><link>https://markc.su/posts/nix-direnv-setup/</link><pubDate>Fri, 09 Jun 2023 09:47:41 +0200</pubDate><guid>https://markc.su/posts/nix-direnv-setup/</guid><description>Over my past blog posts, I&amp;rsquo;ve made it clear that I enjoy how much I like setting up all my projects in the declarative way of Nix. In this article, I will go more in detail on how exactly I have direnv set up to automatically load my tools when I hop into a project.
In my last article I talked about how I don&amp;rsquo;t have most of my programs installed globally, but instead, I have it set up so that whenever I jump into one of my project directories it automatically loads the correct packages and tools into my terminal environment.</description></item><item><title>Nix - The best package manager you should be using</title><link>https://markc.su/posts/nix-package-manager/</link><pubDate>Tue, 23 May 2023 22:21:19 +0200</pubDate><guid>https://markc.su/posts/nix-package-manager/</guid><description>This is an article I wrote for the upcoming Visionen issue &amp;ldquo;Nachwuchs&amp;rdquo;. The issue will be released in the coming weeks and this serves as a little sneak-peak.
Have you ever tried to install a program, only for it to require some specific Python version, GCC to be exactly version 11, or some other random program you never even heard of? Additionally, you have to figure out where to install what and how, because everybody has their standard on how programs should be installed.</description></item><item><title>I use NixOS btw</title><link>https://markc.su/posts/nix/</link><pubDate>Mon, 06 Mar 2023 13:36:25 +0100</pubDate><guid>https://markc.su/posts/nix/</guid><description>Table of Contents&amp;nbsp;¶ Table of Contents Introduction Fun Study Phase Project Purely functional? What? How do I install a program? Global Install So this is the perfect OS, why doesn&amp;rsquo;t everyone use it? Introduction&amp;nbsp;¶ In the world of Linux distros, there are quite a few unique distros. Just to mention two amazing ones of the bunch: Hannah Montana Linux and Biebian can improve your Linux experience with awesome pre-installed theming.</description></item><item><title>Building an Overkill Home Server</title><link>https://markc.su/posts/build_an_overkill_server/</link><pubDate>Sat, 07 Jan 2023 07:07:21 +0100</pubDate><guid>https://markc.su/posts/build_an_overkill_server/</guid><description>For future side projects and to learn Kubernetes more interactively I decided to build a server at home. I&amp;rsquo;ve been thinking about it a lot and then last summer I finally scrambled together all the components to build it.
Because I don&amp;rsquo;t only want the server to be able to host websites but also GameServers I opted for a more powerful build.
Kubernetes, what and why?&amp;nbsp;¶ My whole plan for this server was to use it for hosting different applications and websites.</description></item><item><title>Creating a Thread Pool in C</title><link>https://markc.su/posts/threadpool_c/</link><pubDate>Tue, 24 May 2022 09:09:47 +0200</pubDate><guid>https://markc.su/posts/threadpool_c/</guid><description>Table of Contents&amp;nbsp;¶ Why a thread pool in C? Basic Layout Implementation Work Node Thread Pool Functions t_pool_init thread_work_loop t_pool_add_work t_pool_pop_work t_pool_destroy t_process_count Using the thread pool Final words Why a thread pool in C?&amp;nbsp;¶ For the past few weeks, I&amp;rsquo;ve been working on a Discord bot library written in C called Disco-C. It allows for people to easily write their own Discord bots all in C. It is a nice project that allows me to use a lot of different things that I learned the past 4 semesters, but this bot is for a different blog post.</description></item><item><title>React.js Games</title><link>https://markc.su/posts/react_games/</link><pubDate>Thu, 07 Apr 2022 09:14:40 +0200</pubDate><guid>https://markc.su/posts/react_games/</guid><description>React.js Games&amp;nbsp;¶ Recently I was at a hackathon (StartHack 22) and there I did a lot of frontend for the app we produced. I told myself there I&amp;rsquo;ll not write another line of Javascript or CSS for the weeks to come, because I had enough frontend for the time being. Then came the weekend and some people were playing Minesweeper on my Discord bot Lecturfier. The problem with Minesweeper on Discord is though, that the playing field is simply one big field of spoiler-tagged characters, meaning there is no way to actually flag bombs and there&amp;rsquo;s no way for the bot to know if you won or lost.</description></item><item><title>3D Raycasting</title><link>https://markc.su/posts/raycasting/</link><pubDate>Mon, 14 Mar 2022 08:11:22 +0100</pubDate><guid>https://markc.su/posts/raycasting/</guid><description>Becoming a Coding Train Fanboy&amp;nbsp;¶ Lately I&amp;rsquo;ve been binging a lot of YouTube again and for a while now I&amp;rsquo;ve been recommended The Coding Train videos, but I&amp;rsquo;ve never cared enough to open one of his 40min videos, until a week ago when I discovered how great his coding projects are. Upon watching the introduction of one of his approximating Pi videos I decided it would be fun to try and code the program, before watching the video.</description></item><item><title>Learning the Nimble Nim</title><link>https://markc.su/posts/learning_nim/</link><pubDate>Sun, 09 May 2021 14:38:03 +0200</pubDate><guid>https://markc.su/posts/learning_nim/</guid><description>Table of Contents&amp;nbsp;¶ What is Nim? Why? The Surprises Variables Switch Cases For Loops Procedures Arrays Objects Conclusion What is Nim?&amp;nbsp;¶ Nim does a good job explaining what it is in a short way on their website:
Nim is a statically typed compiled systems programming language. It combines successful concepts from mature languages like Python, Ada and Modula.
But that quote only covers a tiny portion of what Nim really is.</description></item><item><title>Making the Hangman Solver Faster</title><link>https://markc.su/posts/hangman/</link><pubDate>Fri, 16 Apr 2021 18:45:56 +0200</pubDate><guid>https://markc.su/posts/hangman/</guid><description>The What?&amp;nbsp;¶ A few years ago when I was starting with Python we used to sometimes play little hangman games in class. I thought it to be a really good practice to write a little program, that could tell me what character I should guess next. That&amp;rsquo;s where I started with my hangman solver. I can put in the word I&amp;rsquo;m looking for, the characters that are not allowed and the language (English or German) it should search words for.</description></item><item><title>Polyring</title><link>https://markc.su/polyring/</link><pubDate>Fri, 16 Apr 2021 12:01:21 +0200</pubDate><guid>https://markc.su/polyring/</guid><description>Polyring is a cool way to join together websites in a webring with members of ETH Zurich.
Member of the Polyring webring</description></item><item><title>About</title><link>https://markc.su/about/</link><pubDate>Thu, 15 Apr 2021 19:26:59 +0200</pubDate><guid>https://markc.su/about/</guid><description>Hello, I&amp;rsquo;m Mark. Currently in my bachelor of computer science at ETH Zurich. I like to code a lot. You&amp;rsquo;ll never see me without tons of projects on the side. I have too many projects I wanna do, but not enough time to work on them all. Friends usually ask &amp;ldquo;What projects are you working on?&amp;rdquo; instead of &amp;ldquo;How&amp;rsquo;s studying going?&amp;rdquo;
Languages I consider myself fluent in are Python, C and Typescript.</description></item><item><title>Getting Started with Hugo</title><link>https://markc.su/posts/getting_started/</link><pubDate>Thu, 15 Apr 2021 18:24:16 +0200</pubDate><guid>https://markc.su/posts/getting_started/</guid><description>Welcome&amp;nbsp;¶ Welcome to the grand opening of my new website. This is the very first post on here.
This website is mainly to test out new stuff in the direction of web development, as that is a direction I don&amp;rsquo;t currently have a lot of experience with. Additionally, a plan I have in mind is to write quick summaries for topics I&amp;rsquo;m currently learning about. This would be useful for myself to look back at when learning for exams and it might even be interesting for some people to read about the topics.</description></item></channel></rss>