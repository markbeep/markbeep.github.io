<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>multithreading on Hello, I'm Mark</title><link>https://markc.su/tags/multithreading/</link><description>Recent content in multithreading on Hello, I'm Mark</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 24 May 2022 09:09:47 +0200</lastBuildDate><atom:link href="https://markc.su/tags/multithreading/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a Thread Pool in C</title><link>https://markc.su/posts/threadpool_c/</link><pubDate>Tue, 24 May 2022 09:09:47 +0200</pubDate><guid>https://markc.su/posts/threadpool_c/</guid><description>Table of Contents&amp;nbsp;¶ Why a thread pool in C? Basic Layout Implementation Work Node Thread Pool Functions t_pool_init thread_work_loop t_pool_add_work t_pool_pop_work t_pool_destroy t_process_count Using the thread pool Final words Why a thread pool in C?&amp;nbsp;¶ For the past few weeks, I&amp;rsquo;ve been working on a Discord bot library written in C called Disco-C. It allows for people to easily write their own Discord bots all in C. It is a nice project that allows me to use a lot of different things that I learned the past 4 semesters, but this bot is for a different blog post.</description></item></channel></rss>